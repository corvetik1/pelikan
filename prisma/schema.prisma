// Prisma schema for admin panel
// Datasource configuration
// Replace DATABASE_URL in .env with your Postgres connection string

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------- MODELS --------------------

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions String[]
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model News {
  // --- NEWS ---
  id       String   @id @default(uuid())
  title    String
  excerpt  String
  category String
  date     DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------- HERO SLIDES --------------------
model Hero {
  id       String @id @default(uuid())
  title    String
  subtitle String
  img      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------- PRODUCTS --------------------
model Product {
  id            String   @id @default(uuid())
  name          String
  slug          String   @unique
  price         Int
  img           String
  description   String
  weight        String
  category      String
  isNew         Boolean  @default(false)
  isPromo       Boolean  @default(false)
  processing    String?
  packageWeight Int?
  packageType   String?
  origin        String?
  certificates  String[]
  images        String[]

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  recipes   RecipeProduct[]
  reviews   Review[]
}

// -------------------- RECIPES --------------------
model Recipe {
  id               String   @id @default(uuid())
  slug             String   @unique
  title            String
  img              String
  shortDescription String
  ingredients      String[]
  steps            String[]
  cookingTime      Int
  category         String
  images           String[]

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  products  RecipeProduct[]
}

// -------------------- RELATIONS --------------------
model RecipeProduct {
  recipeId  String
  productId String

  recipe  Recipe  @relation(fields: [recipeId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())

  @@id([recipeId, productId])
}

// -------------------- QUOTES --------------------

enum QuoteStatus {
  pending
  priced
  rejected
}

model Quote {
  id        String      @id @default(uuid())
  items     Json
  prices    Json?
  status    QuoteStatus @default(pending)
  userEmail String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// -------------------- REVIEWS --------------------
model Review {
  id        String       @id @default(uuid())
  productId String
  rating    Int          @default(5)
  body      String
  author    String?
  status    ReviewStatus @default(pending)
  createdAt DateTime     @default(now())

  product Product @relation(fields: [productId], references: [id])

  @@index([productId, status])
}

enum ReviewStatus {
  pending
  approved
  rejected
}

// -------------------- STORES --------------------
model Store {
  id       String  @id @default(uuid())
  name     String
  address  String
  lat      Float
  lng      Float
  region   String
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------- USERS --------------------
model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  name     String?
  isActive Boolean @default(true)
  roles    Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------- MEDIA --------------------
model Media {
  id        String   @id @default(uuid())
  filename  String
  url       String   @unique
  mimeType  String
  size      Int
  alt       String?
  tags      String[]
  createdAt DateTime @default(now())
}
